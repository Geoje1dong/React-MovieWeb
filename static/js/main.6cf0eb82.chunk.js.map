{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","overview","rating","react_default","a","createElement","className","src","alt","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","movie_page","_renderMovies","_this","movies","map","index","src_movie","concat","poster_path","vote_average","genre","genre_ids","key","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","results","stop","fetch","then","response","json","catch","err","console","log","_infiniteScroll","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAmCeA,MA9Bf,SAAAC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,OAAQC,EAAkBH,EAAlBG,SAAUC,EAAQJ,EAARI,OACrC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAQQ,IAAKT,IACvBI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,YAAOH,GACPC,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,KAAMT,EACNU,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC8CfC,6MA1DbC,MAAQ,CACNC,WAAY,KAcdC,cAAgB,WAId,OAHeC,EAAKH,MAAMI,OAAOC,IAAI,SAACD,EAAQE,GAC5C,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAAOxB,MAAOqB,EAAOrB,MAAOC,OAAM,kCAAAwB,OAAoCJ,EAAOK,aAAexB,SAAUmB,EAAOnB,SAAUC,OAAQkB,EAAOM,aAAcC,MAAOP,EAAOQ,UAAWC,IAAKT,EAAOU,UAKpMC,gCAAa,SAAAC,IAAA,IAAAZ,EAAA,OAAAa,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUlB,EAAKmB,WADf,OACLlB,EADKe,EAAAI,KAEXpB,EAAKqB,SAAS,CACZpB,OAAQA,EAAOqB,QAAQjB,OAAOJ,EAAOqB,WAH5B,wBAAAN,EAAAO,SAAAV,QAObM,SAAW,WAET,OAAOK,MAAK,2KACXC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,gBAAkB,WAChB,IAAIC,EAAeC,KAAKC,IAAIC,SAASC,gBAAgBJ,aAAcG,SAASE,KAAKL,cACjEC,KAAKC,IAAIC,SAASC,gBAAgBE,UAAWH,SAASE,KAAKC,WACxDH,SAASC,gBAAgBG,eACZP,IAC9BjC,EAAKqB,SAAS,CACZvB,WAAYE,EAAKH,MAAMC,WAAa,IAEtCE,EAAKY,mGAvCPkB,QAAQC,IAAI,0DAIZD,QAAQC,IAAI,aACZU,KAAK7B,8CAwCL,OADAkB,QAAQC,IAAI,UAEV/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZsD,KAAK5C,MAAMI,OAASwC,KAAK1C,gBAAkB,kBArDlC2C,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASd,SAASe,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.6cf0eb82.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './movie.css';\n\nfunction Movie({title, poster, overview, rating}){\n    return(\n        <div className=\"poster-card\">\n            <img src={poster} alt={title}/>\n            <div>\n                <h1>{title}</h1>\n                <span>{rating}</span>\n                <p>\n                    <LinesEllipsis\n                      text={overview}\n                      maxLine='5'\n                      ellipsis='...'\n                      trimRight\n                      basedOn='letters'\n                    />\n                </p>\n                \n            </div>\n        </div>\n    )\n}\n\nMovie.propTypes = {\n    title : PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired,\n    rating : PropTypes.number.isRequired,\n    overview : PropTypes.string.isRequired\n}\n\n\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './movie';\n\n\nclass App extends Component {\n  state = {\n    movie_page: 1\n  }\n  \n  componentWillMount(){\n    console.log('will mount')\n  }\n  \n  componentDidMount(){\n    console.log('did mount')\n    this._getMovies();\n    //  window.addEventListener('scroll', this._infiniteScroll, true);\n    \n  }\n  \n  _renderMovies = () => {\n    const movies = this.state.movies.map((movies, index) => {\n      return <Movie title={movies.title} poster={`https://image.tmdb.org/t/p/w500${movies.poster_path}`} overview={movies.overview} rating={movies.vote_average} genre={movies.genre_ids} key={movies.id}/>\n    })\n    return movies\n  }\n  \n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies: movies.results.concat(movies.results)\n    })\n  }\n  \n  _callApi = () => {\n    //return fetch(`https://api.themoviedb.org/3/discover/movie?api_key=d5f6d7a1803c7ddadee30f4f693b4340&language=ko&sort_by=popularity.desc&include_adult=false&include_video=false&page=${this.state.movie_page}`)\n    return fetch(`https://api.themoviedb.org/3/discover/movie?api_key=d5f6d7a1803c7ddadee30f4f693b4340&language=ko&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`)\n    .then(response => response.json())\n    .catch(err => console.log(err))\n  }\n  \n  _infiniteScroll = () => {\n    let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n    let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n    let clientHeight = document.documentElement.clientHeight;\n    if(scrollTop + clientHeight === scrollHeight){\n      this.setState({\n        movie_page: this.state.movie_page + 1\n      })\n      this._getMovies();\n    }\n  }\n  \n  render() {\n    console.log('render')\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}